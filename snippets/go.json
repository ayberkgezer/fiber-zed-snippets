{
  "Fiber Basic Setup": {
    "prefix": "fiber2-setup",
    "body": [
      "package main",
      "",
      "import (",
      "\t\"log\"",
      "\t\"github.com/gofiber/fiber/v2\"",
      ")",
      "",
      "func main() {",
      "\t// Create a new Fiber instance",
      "\tapp := fiber.New(fiber.Config{",
      "\t\tServerHeader: \"Fiber\", // Add custom server header",
      "\t\tAppName:      \"${1:My Fiber App v1.0.0}\",",
      "\t})",
      "",
      "\t// Define a route",
      "\tapp.Get(\"/\", func(c *fiber.Ctx) error {",
      "\t\treturn c.SendString(\"Hello, World!\")",
      "\t})",
      "",
      "\t// Start server on port 3000",
      "\tlog.Fatal(app.Listen(\":${2:3000}\"))",
      "}"
    ],
    "description": "Basic Fiber v2 app setup with configuration"
  },
  "Fiber Route Handler": {
    "prefix": "fiber2-route",
    "body": [
      "app.${1|Get,Post,Put,Delete,Patch,Head,Options|}(\"${2:/path}\", func(c *fiber.Ctx) error {",
      "\t${3:// Your handler logic here}",
      "\treturn c.SendString(\"${4:Response}\")",
      "})"
    ],
    "description": "Fiber route handler with common HTTP methods"
  },
  "Fiber Route Group": {
    "prefix": "fiber2-group",
    "body": [
      "// Create a new route group",
      "${1:api} := app.Group(\"${2:/api}\", ${3:// Middleware here})",
      "",
      "// Define routes for the group",
      "${1:api}.Get(\"${4:/users}\", func(c *fiber.Ctx) error {",
      "\t${5:// Your handler logic here}",
      "\treturn c.JSON(${6:response})",
      "})"
    ],
    "description": "Fiber route group with nested routes"
  },
  "Fiber Middleware": {
    "prefix": "fiber2-middleware",
    "body": [
      "// Custom middleware",
      "func ${1:logger}(c *fiber.Ctx) error {",
      "\t${2:// Middleware logic before calling the next handler}",
      "\t",
      "\t// Call the next handler",
      "\terr := c.Next()",
      "\t",
      "\t${3:// Middleware logic after calling the next handler}",
      "\t",
      "\treturn err",
      "}"
    ],
    "description": "Custom Fiber middleware function"
  },
  "Fiber Global Middleware": {
    "prefix": "fiber2-use",
    "body": [
      "// Apply middleware to all routes",
      "app.Use(${1:middlewareFunc})"
    ],
    "description": "Apply middleware to all routes in Fiber"
  },
  "Fiber Specific Route Middleware": {
    "prefix": "fiber2-route-middleware",
    "body": [
      "// Apply middleware to specific route",
      "app.${1|Get,Post,Put,Delete,Patch|}(\"${2:/path}\", ${3:middlewareFunc1}, ${4:middlewareFunc2}, func(c *fiber.Ctx) error {",
      "\t${5:// Route handler logic}",
      "\treturn c.SendString(\"${6:Response}\")",
      "})"
    ],
    "description": "Apply middleware to a specific route in Fiber"
  },
  "Fiber Static Files": {
    "prefix": "fiber2-static",
    "body": [
      "// Serve static files from directory",
      "app.Static(\"${1:/}\", \"${2:./public}\"${3:, fiber.Static{",
      "\tCompress: ${4:true},",
      "\tBrowse:   ${5:true},",
      "\tIndex:    \"${6:index.html}\",",
      "\tMaxAge:   ${7:3600},",
      "\\}})"
    ],
    "description": "Serve static files with Fiber"
  },
  "Fiber JSON Response": {
    "prefix": "fiber2-json",
    "body": [
      "return c.JSON(fiber.Map{",
      "\t\"${1:status}\": \"${2:success}\",",
      "\t\"${3:data}\": ${4:data},",
      "})"
    ],
    "description": "Return a JSON response in Fiber"
  },
  "Fiber Error Handling": {
    "prefix": "fiber2-error",
    "body": [
      "// Custom error handler",
      "app.Use(func(c *fiber.Ctx) error {",
      "\t// Continue stack",
      "\terr := c.Next()",
      "\t",
      "\t// Handle error if there is one",
      "\tif err != nil {",
      "\t\t// Return error code 500 if not already set",
      "\t\tif c.Response().StatusCode() < 400 {",
      "\t\t\tc.Status(fiber.StatusInternalServerError)",
      "\t\t}",
      "\t\t",
      "\t\t// Send error message",
      "\t\treturn c.JSON(fiber.Map{",
      "\t\t\t\"status\": \"error\",",
      "\t\t\t\"message\": err.Error(),",
      "\t\t})",
      "\t}",
      "\t",
      "\treturn nil",
      "})"
    ],
    "description": "Custom error handling middleware for Fiber"
  },
  "Fiber Request Params": {
    "prefix": "fiber2-params",
    "body": [
      "// Get parameter value",
      "${1:id} := c.Params(\"${2:id}\")",
      "",
      "// Return error if param doesn't exist",
      "if ${1:id} == \"\" {",
      "\treturn fiber.NewError(fiber.StatusBadRequest, \"${3:Missing ID parameter}\")",
      "}"
    ],
    "description": "Get and validate URL parameters in Fiber"
  },
  "Fiber Query Params": {
    "prefix": "fiber2-query",
    "body": [
      "// Get query parameter with default value",
      "${1:page} := c.Query(\"${2:page}\", \"${3:1}\")",
      "",
      "// Get all query parameters as map",
      "${4:queries} := c.Queries()"
    ],
    "description": "Working with query parameters in Fiber"
  },
  "Fiber Request Body": {
    "prefix": "fiber2-body",
    "body": [
      "// Define the struct to bind the request body",
      "type ${1:User} struct {",
      "\t${2:Name} ${3:string} `json:\"${4:name}\"`",
      "\t${5:Email} ${6:string} `json:\"${7:email}\"`",
      "}",
      "",
      "// Create a new instance",
      "${8:user} := new(${1:User})",
      "",
      "// Parse body into struct",
      "if err := c.BodyParser(${8:user}); err != nil {",
      "\treturn fiber.NewError(fiber.StatusBadRequest, \"${9:Cannot parse request body}\")",
      "}"
    ],
    "description": "Parse request body in Fiber"
  },
  "Fiber Templates": {
    "prefix": "fiber2-templates",
    "body": [
      "import (",
      "\t\"github.com/gofiber/fiber/v2\"",
      "\t\"github.com/gofiber/template/html/v2\"",
      ")",
      "",
      "func main() {",
      "\t// Initialize template engine",
      "\tengine := html.New(\"${1:./views}\", \"${2:.html}\")",
      "\t",
      "\t// Create fiber app with template engine",
      "\tapp := fiber.New(fiber.Config{",
      "\t\tViews: engine,",
      "\t})",
      "\t",
      "\t// Render a template",
      "\tapp.Get(\"/\", func(c *fiber.Ctx) error {",
      "\t\treturn c.Render(\"${3:index}\", fiber.Map{",
      "\t\t\t\"Title\": \"${4:Hello, World!}\",",
      "\t\t\t\"Data\":  ${5:someData},",
      "\t\t})",
      "\t})",
      "}"
    ],
    "description": "Setup HTML templates with Fiber"
  },
  "Fiber File Download": {
    "prefix": "fiber2-download",
    "body": [
      "// Download file",
      "return c.Download(\"${1:./files/file.pdf}\", \"${2:download.pdf}\")"
    ],
    "description": "Download a file in Fiber"
  },
  "Fiber File Upload": {
    "prefix": "fiber2-upload",
    "body": [
      "// Handle file upload",
      "file, err := c.FormFile(\"${1:document}\")",
      "if err != nil {",
      "\treturn fiber.NewError(fiber.StatusBadRequest, \"${2:Error getting the file}\")",
      "}",
      "",
      "// Save file to disk",
      "if err := c.SaveFile(file, \"${3:./uploads/}\" + file.Filename); err != nil {",
      "\treturn fiber.NewError(fiber.StatusInternalServerError, \"${4:Error saving the file}\")",
      "}"
    ],
    "description": "Handle file uploads in Fiber"
  },
  "Fiber CORS Middleware": {
    "prefix": "fiber2-cors",
    "body": [
      "import (",
      "\t\"github.com/gofiber/fiber/v2\"",
      "\t\"github.com/gofiber/fiber/v2/middleware/cors\"",
      ")",
      "",
      "// Setup CORS middleware",
      "app.Use(cors.New(cors.Config{",
      "\tAllowOrigins: \"${1:*}\",",
      "\tAllowMethods: \"${2:GET,POST,PUT,DELETE,OPTIONS}\",",
      "\tAllowHeaders: \"${3:Origin,Content-Type,Accept,Content-Length,Accept-Language,Accept-Encoding,Connection,Access-Control-Allow-Origin}\",",
      "\tAllowCredentials: ${4:true},",
      "\tMaxAge: ${5:86400}, // Preflight requests are valid for 24 hours",
      "}))"
    ],
    "description": "Setup CORS middleware in Fiber"
  },
  "Fiber Rate Limiter": {
    "prefix": "fiber2-limiter",
    "body": [
      "import (",
      "\t\"github.com/gofiber/fiber/v2\"",
      "\t\"github.com/gofiber/fiber/v2/middleware/limiter\"",
      "\t\"time\"",
      ")",
      "",
      "// Setup rate limiter middleware",
      "app.Use(limiter.New(limiter.Config{",
      "\tMax:        ${1:20},         // Max number of requests",
      "\tExpiration: ${2:30} * time.Second, // Expiration time",
      "\tKeyGenerator: func(c *fiber.Ctx) string {",
      "\t\treturn c.IP() // Use IP address as key",
      "\t},",
      "\tLimitReached: func(c *fiber.Ctx) error {",
      "\t\treturn c.Status(fiber.StatusTooManyRequests).JSON(fiber.Map{",
      "\t\t\t\"status\":  \"error\",",
      "\t\t\t\"message\": \"Too many requests\",",
      "\t\t})",
      "\t},",
      "}))"
    ],
    "description": "Setup rate limiter middleware in Fiber"
  },
  "Fiber JWT Authentication": {
    "prefix": "fiber2-jwt",
    "body": [
      "import (",
      "\t\"github.com/gofiber/fiber/v2\"",
      "\t\"github.com/gofiber/fiber/v2/middleware/jwt\"",
      "\t\"github.com/golang-jwt/jwt/v4\"",
      "\t\"time\"",
      ")",
      "",
      "// JWT secret key",
      "var jwtSecret = []byte(\"${1:your-secret-key}\")",
      "",
      "// Create a JWT token",
      "func createToken(${2:userID string}) (string, error) {",
      "\t// Create token",
      "\ttoken := jwt.New(jwt.SigningMethodHS256)",
      "\t",
      "\t// Set claims",
      "\tclaims := token.Claims.(jwt.MapClaims)",
      "\tclaims[\"${3:user_id}\"] = ${2:userID}",
      "\tclaims[\"exp\"] = time.Now().Add(time.Hour * ${4:72}).Unix()",
      "\t",
      "\t// Generate encoded token",
      "\ttokenString, err := token.SignedString(jwtSecret)",
      "\tif err != nil {",
      "\t\treturn \"\", err",
      "\t}",
      "\t",
      "\treturn tokenString, nil",
      "}",
      "",
      "// JWT middleware",
      "app.Use(jwt.New(jwt.Config{",
      "\tSigningKey: jwtSecret,",
      "\tErrorHandler: func(c *fiber.Ctx, err error) error {",
      "\t\treturn c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{",
      "\t\t\t\"status\":  \"error\",",
      "\t\t\t\"message\": \"Unauthorized\",",
      "\t\t\t\"error\":   err.Error(),",
      "\t\t})",
      "\t},",
      "}))"
    ],
    "description": "JWT authentication in Fiber"
  },
  "Fiber Swagger Documentation": {
    "prefix": "fiber2-swagger",
    "body": [
      "import (",
      "\t\"github.com/gofiber/fiber/v2\"",
      "\t\"github.com/gofiber/swagger\"",
      ")",
      "",
      "// @title ${1:Fiber API}",
      "// @version ${2:1.0}",
      "// @description ${3:This is a sample Fiber server}",
      "// @host ${4:localhost:3000}",
      "// @BasePath ${5:/api}",
      "func main() {",
      "\tapp := fiber.New()",
      "\t",
      "\t// Swagger documentation endpoint",
      "\tapp.Get(\"/swagger/*\", swagger.HandlerDefault)",
      "\t",
      "\t// API routes go here",
      "\t",
      "\tapp.Listen(\":3000\")",
      "}"
    ],
    "description": "Setup Swagger documentation in Fiber"
  },
  "Fiber Request Logger": {
    "prefix": "fiber2-logger",
    "body": [
      "import (",
      "\t\"github.com/gofiber/fiber/v2\"",
      "\t\"github.com/gofiber/fiber/v2/middleware/logger\"",
      ")",
      "",
      "// Setup logger middleware",
      "app.Use(logger.New(logger.Config{",
      "\tFormat:     \"${1:[${time}] ${status} - ${latency} ${method} ${path}\\n}\",",
      "\tTimeFormat: \"${2:15:04:05}\",",
      "\tTimeZone:   \"${3:Local}\",",
      "}))"
    ],
    "description": "Setup request logger middleware in Fiber"
  },
  "Fiber Cookie Handling": {
    "prefix": "fiber2-cookies",
    "body": [
      "// Set cookie",
      "c.Cookie(&fiber.Cookie{",
      "\tName:     \"${1:session}\",",
      "\tValue:    \"${2:value}\",",
      "\tPath:     \"${3:/}\",",
      "\tDomain:   \"${4:domain.com}\", // Optional",
      "\tMaxAge:   ${5:3600}, // Seconds",
      "\tSecure:   ${6:false},",
      "\tHTTPOnly: ${7:true},",
      "\tSameSite: \"${8:lax}\",",
      "})",
      "",
      "// Get cookie value",
      "${9:sessionValue} := c.Cookies(\"${1:session}\")"
    ],
    "description": "Handle cookies in Fiber"
  },
  "Fiber Websocket": {
    "prefix": "fiber2-websocket",
    "body": [
      "import (",
      "\t\"github.com/gofiber/fiber/v2\"",
      "\t\"github.com/gofiber/websocket/v2\"",
      ")",
      "",
      "func main() {",
      "\tapp := fiber.New()",
      "\t",
      "\t// WebSocket middleware",
      "\tapp.Use(\"/ws\", func(c *fiber.Ctx) error {",
      "\t\t// IsWebSocketUpgrade returns true if the client requested upgrade to WebSocket protocol",
      "\t\tif websocket.IsWebSocketUpgrade(c) {",
      "\t\t\tc.Locals(\"allowed\", true)",
      "\t\t\treturn c.Next()",
      "\t\t}",
      "\t\treturn fiber.ErrUpgradeRequired",
      "\t})",
      "\t",
      "\t// WebSocket endpoint",
      "\tapp.Get(\"/ws\", websocket.New(func(c *websocket.Conn) {",
      "\t\t// Websocket handler",
      "\t\tvar (${1:",
      "\t\t\tmsg []byte",
      "\t\t\terr error",
      "\t\t})",
      "\t\t",
      "\t\tfor {${2:",
      "\t\t\t// Read message from client",
      "\t\t\tif _, msg, err = c.ReadMessage(); err != nil {",
      "\t\t\t\tbreak",
      "\t\t\t}",
      "\t\t\t",
      "\t\t\t// Write message back to client",
      "\t\t\tif err = c.WriteMessage(websocket.TextMessage, msg); err != nil {",
      "\t\t\t\tbreak",
      "\t\t\t}",
      "\t\t}}",
      "\t}))",
      "\t",
      "\tapp.Listen(\":3000\")",
      "}"
    ],
    "description": "WebSocket implementation in Fiber"
  },
  "Fiber Database Connection": {
    "prefix": "fiber2-database",
    "body": [
      "import (",
      "\t\"fmt\"",
      "\t\"log\"",
      "\t\"github.com/gofiber/fiber/v2\"",
      "\t\"gorm.io/driver/postgres\"",
      "\t\"gorm.io/gorm\"",
      ")",
      "",
      "var DB *gorm.DB",
      "",
      "// Connect to database",
      "func connectDB() {",
      "\t// Connection URL",
      "\tdsn := \"host=${1:localhost} user=${2:postgres} password=${3:password} dbname=${4:dbname} port=${5:5432} sslmode=disable\"",
      "\t",
      "\t// Connect to database",
      "\tdb, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})",
      "\tif err != nil {",
      "\t\tlog.Fatal(\"Failed to connect to database:\", err)",
      "\t}",
      "\t",
      "\tfmt.Println(\"Database connection successfully established\")",
      "\t",
      "\t// Set global DB variable",
      "\tDB = db",
      "\t",
      "\t// Auto migrate the models",
      "\t${6:DB.AutoMigrate(&Model{})}",
      "}"
    ],
    "description": "Database connection setup in Fiber with GORM"
  },
  "Fiber Model Definition": {
    "prefix": "fiber2-model",
    "body": [
      "import (",
      "\t\"time\"",
      "\t\"gorm.io/gorm\"",
      ")",
      "",
      "// ${1:User} model",
      "type ${1:User} struct {",
      "\tID        uint           `json:\"id\" gorm:\"primaryKey\"`",
      "\tCreatedAt time.Time      `json:\"created_at\"`",
      "\tUpdatedAt time.Time      `json:\"updated_at\"`",
      "\tDeletedAt gorm.DeletedAt `json:\"-\" gorm:\"index\"`",
      "\t${2:Name}   string         `json:\"${3:name}\"`",
      "\t${4:Email}  string         `json:\"${5:email}\" gorm:\"unique\"`",
      "}"
    ],
    "description": "GORM model definition for Fiber apps"
  },
  "Fiber CRUD Operations": {
    "prefix": "fiber2-crud",
    "body": [
      "import (",
      "\t\"github.com/gofiber/fiber/v2\"",
      ")",
      "",
      "// Define model",
      "type ${1:User} struct {",
      "\tID    uint   `json:\"id\" gorm:\"primaryKey\"`",
      "\t${2:Name}  string `json:\"${3:name}\"`",
      "\t${4:Email} string `json:\"${5:email}\" gorm:\"unique\"`",
      "}",
      "",
      "// Get all ${1:User}s",
      "func Get${1:User}s(c *fiber.Ctx) error {",
      "\tvar ${6:users} []${1:User}",
      "\tresult := DB.Find(&${6:users})",
      "\t",
      "\tif result.Error != nil {",
      "\t\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{",
      "\t\t\t\"status\":  \"error\",",
      "\t\t\t\"message\": \"Error retrieving ${6:users}\",",
      "\t\t\t\"error\":   result.Error.Error(),",
      "\t\t})",
      "\t}",
      "\t",
      "\treturn c.JSON(fiber.Map{",
      "\t\t\"status\": \"success\",",
      "\t\t\"data\":   ${6:users},",
      "\t\t\"count\":  len(${6:users}),",
      "\t})",
      "}",
      "",
      "// Get a ${1:User} by ID",
      "func Get${1:User}(c *fiber.Ctx) error {",
      "\tid := c.Params(\"id\")",
      "\tvar ${7:user} ${1:User}",
      "\t",
      "\tresult := DB.First(&${7:user}, id)",
      "\t",
      "\tif result.Error != nil {",
      "\t\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{",
      "\t\t\t\"status\":  \"error\",",
      "\t\t\t\"message\": \"${1:User} not found\",",
      "\t\t\t\"error\":   result.Error.Error(),",
      "\t\t})",
      "\t}",
      "\t",
      "\treturn c.JSON(fiber.Map{",
      "\t\t\"status\": \"success\",",
      "\t\t\"data\":   ${7:user},",
      "\t})",
      "}",
      "",
      "// Create a new ${1:User}",
      "func Create${1:User}(c *fiber.Ctx) error {",
      "\t${7:user} := new(${1:User})",
      "\t",
      "\tif err := c.BodyParser(${7:user}); err != nil {",
      "\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{",
      "\t\t\t\"status\":  \"error\",",
      "\t\t\t\"message\": \"Cannot parse request body\",",
      "\t\t\t\"error\":   err.Error(),",
      "\t\t})",
      "\t}",
      "\t",
      "\tresult := DB.Create(&${7:user})",
      "\t",
      "\tif result.Error != nil {",
      "\t\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{",
      "\t\t\t\"status\":  \"error\",",
      "\t\t\t\"message\": \"Error creating ${7:user}\",",
      "\t\t\t\"error\":   result.Error.Error(),",
      "\t\t})",
      "\t}",
      "\t",
      "\treturn c.Status(fiber.StatusCreated).JSON(fiber.Map{",
      "\t\t\"status\": \"success\",",
      "\t\t\"data\":   ${7:user},",
      "\t})",
      "}",
      "",
      "// Update a ${1:User}",
      "func Update${1:User}(c *fiber.Ctx) error {",
      "\tid := c.Params(\"id\")",
      "\t${7:user} := new(${1:User})",
      "\t",
      "\t// Check if ${7:user} exists",
      "\tif result := DB.First(&${1:User}{}, id); result.Error != nil {",
      "\t\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{",
      "\t\t\t\"status\":  \"error\",",
      "\t\t\t\"message\": \"${1:User} not found\",",
      "\t\t\t\"error\":   result.Error.Error(),",
      "\t\t})",
      "\t}",
      "\t",
      "\t// Parse request body",
      "\tif err := c.BodyParser(${7:user}); err != nil {",
      "\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{",
      "\t\t\t\"status\":  \"error\",",
      "\t\t\t\"message\": \"Cannot parse request body\",",
      "\t\t\t\"error\":   err.Error(),",
      "\t\t})",
      "\t}",
      "\t",
      "\t// Update ${7:user}",
      "\tDB.Model(&${1:User}{}).Where(\"id = ?\", id).Updates(${7:user})",
      "\t",
      "\t// Get updated ${7:user}",
      "\tDB.First(&${7:user}, id)",
      "\t",
      "\treturn c.JSON(fiber.Map{",
      "\t\t\"status\": \"success\",",
      "\t\t\"data\":   ${7:user},",
      "\t})",
      "}",
      "",
      "// Delete a ${1:User}",
      "func Delete${1:User}(c *fiber.Ctx) error {",
      "\tid := c.Params(\"id\")",
      "\t",
      "\t// Check if ${7:user} exists",
      "\tvar ${7:user} ${1:User}",
      "\tif result := DB.First(&${7:user}, id); result.Error != nil {",
      "\t\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{",
      "\t\t\t\"status\":  \"error\",",
      "\t\t\t\"message\": \"${1:User} not found\",",
      "\t\t\t\"error\":   result.Error.Error(),",
      "\t\t})",
      "\t}",
      "\t",
      "\t// Delete ${7:user}",
      "\tDB.Delete(&${7:user})",
      "\t",
      "\treturn c.JSON(fiber.Map{",
      "\t\t\"status\":  \"success\",",
      "\t\t\"message\": \"${1:User} deleted successfully\",",
      "\t})",
      "}"
    ],
    "description": "CRUD operations for a model in Fiber"
  },
  "Fiber MVC Structure": {
    "prefix": "fiber2-mvc",
    "body": [
      "// app/models/user.go",
      "package models",
      "",
      "import (",
      "\t\"time\"",
      "\t\"gorm.io/gorm\"",
      ")",
      "",
      "type User struct {",
      "\tID        uint           `json:\"id\" gorm:\"primaryKey\"`",
      "\tCreatedAt time.Time      `json:\"created_at\"`",
      "\tUpdatedAt time.Time      `json:\"updated_at\"`",
      "\tDeletedAt gorm.DeletedAt `json:\"-\" gorm:\"index\"`",
      "\t${2:Name}   string         `json:\"${3:name}\"`",
      "\t${4:Email}  string         `json:\"${5:email}\" gorm:\"unique\"`",
      "}",
      "",
      "// app/controllers/user_controller.go",
      "package controllers",
      "",
      "import (",
      "\t\"github.com/gofiber/fiber/v2\"",
      "\t\"your-app/app/models\"",
      "\t\"your-app/database\"",
      ")",
      "",
      "func GetUsers(c *fiber.Ctx) error {",
      "\tvar users []models.User",
      "\tdatabase.DB.Find(&users)",
      "\treturn c.JSON(fiber.Map{",
      "\t\t\"status\": \"success\",",
      "\t\t\"data\":   users,",
      "\t})",
      "}",
      "",
      "// app/routes/routes.go",
      "package routes",
      "",
      "import (",
      "\t\"github.com/gofiber/fiber/v2\"",
      "\t\"your-app/app/controllers\"",
      "\t\"your-app/app/middlewares\"",
      ")",
      "",
      "func SetupRoutes(app *fiber.App) {",
      "\t// API group",
      "\tapi := app.Group(\"/api\", middlewares.AuthMiddleware)",
      "\t",
      "\t// User routes",
      "\tusers := api.Group(\"/users\")",
      "\tusers.Get(\"/\", controllers.GetUsers)",
      "\tusers.Get(\"/:id\", controllers.GetUser)",
      "\tusers.Post(\"/\", controllers.CreateUser)",
      "\tusers.Put(\"/:id\", controllers.UpdateUser)",
      "\tusers.Delete(\"/:id\", controllers.DeleteUser)",
      "}"
    ],
    "description": "MVC structure for Fiber applications"
  },
  "Fiber REST API": {
    "prefix": "fiber2-rest-api",
    "body": [
      "package main",
      "",
      "import (",
      "\t\"log\"",
      "\t\"github.com/gofiber/fiber/v2\"",
      "\t\"github.com/gofiber/fiber/v2/middleware/cors\"",
      "\t\"github.com/gofiber/fiber/v2/middleware/logger\"",
      "\t\"github.com/gofiber/fiber/v2/middleware/recover\"",
      ")",
      "",
      "func main() {",
      "\t// Create a new Fiber app",
      "\tapp := fiber.New(fiber.Config{",
      "\t\tServerHeader: \"Fiber\",",
      "\t\tAppName:      \"${1:API v1}\",",
      "\t\tErrorHandler: func(c *fiber.Ctx, err error) error {",
      "\t\t\tcode := fiber.StatusInternalServerError",
      "\t\t\t",
      "\t\t\t// Check if it's a Fiber error",
      "\t\t\tif e, ok := err.(*fiber.Error); ok {",
      "\t\t\t\tcode = e.Code",
      "\t\t\t}",
      "\t\t\t",
      "\t\t\treturn c.Status(code).JSON(fiber.Map{",
      "\t\t\t\t\"status\":  \"error\",",
      "\t\t\t\t\"message\": err.Error(),",
      "\t\t\t})",
      "\t\t},",
      "\t})",
      "\t",
      "\t// Middleware",
      "\tapp.Use(logger.New())",
      "\tapp.Use(recover.New())",
      "\tapp.Use(cors.New())",
      "\t",
      "\t// API routes",
      "\tapi := app.Group(\"/api\")",
      "\t",
      "\t// Health check endpoint",
      "\tapi.Get(\"/health\", func(c *fiber.Ctx) error {",
      "\t\treturn c.JSON(fiber.Map{",
      "\t\t\t\"status\":  \"success\",",
      "\t\t\t\"message\": \"API is healthy\",",
      "\t\t})",
      "\t})",
      "\t",
      "\t// Add more API routes here",
      "\t${2:// TODO: Add your API routes}",
      "\t",
      "\t// 404 Handler",
      "\tapp.Use(func(c *fiber.Ctx) error {",
      "\t\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{",
      "\t\t\t\"status\":  \"error\",",
      "\t\t\t\"message\": \"Endpoint not found\",",
      "\t\t})",
      "\t})",
      "\t",
      "\t// Start server",
      "\tlog.Fatal(app.Listen(\":${3:3000}\"))",
      "}"
    ],
    "description": "Complete REST API setup with Fiber"
  }
}
